//------------------------------------//
//  $MIXINS
//------------------------------------//


@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after { clear: both; }
}


@mixin n-up($number) {
  &:nth-child(#{$number}n + 1) {
    clear: left;
  }
}

@mixin clear-n-up($number) {
  &:nth-child(#{$number}n + 1) {
    clear: none;
  }
}

@mixin inline-block {
  display: inline-block;
  *display: inline;
  zoom: 1;
}


@mixin hide-text {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin tab-focus {
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

@mixin placeholder {
  &:-moz-placeholder { @content; } // Firefox 4-18
  &::-moz-placeholder { opacity: 1; @content; } // Firefox 19+
  &:-ms-input-placeholder { @content; } // Internet Explorer 10+
  &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

@mixin form-control-validation($text-color: $gray-dark, $border-color: $gray) {
  label,
  .radio,
  .checkbox { color: $text-color; }

  .form-control {
    border-color: $border-color;

    &:focus {
      border-color: darken($border-color, 10%);
      @include box-shadow(0 0 6px lighten($border-color, 20%));
    }
  }
}

@mixin form-control-focus($color: #66afe9) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);

  &:focus {
    border-color: $color;
    outline: 0;
    @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px $color-rgba);
  }
}


@mixin rem($property, $rem-values, $fallback: false) {
  @if not $legacy-ie {
    @if $fallback {
      #{$property}: map(
        force-unit,
        map(multiply, $rem-values, $fallback),
        px
      );
    }
    #{$property}: map(force-unit, $rem-values, rem);
  } @else {
    // Calculate pixel values for legacy browsers that don't support rems.
    #{$property}: map(
      force-unit,
      map(multiply, $rem-values, $base-font-size),
      px
    );
  }
}



@mixin image-2x($image, $width:"", $height:"") {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    // on retina, use image that is scaled by 2
    background-image: url($image);

    @if $width != "" {
      // dimensions ARE passed in, use them
      @include background-size($width $height);
    } @else {
      // dimensions NOT passed in, try to calculate them automatically
      @include background-size(floor(image-width($image)/2) floor(image-height($image)/2));
    }
  }
}




@mixin media-query($media-query) {

  @if $legacy-ie == true {
    // render styles without media queries

    @if $media-query == "hand-and-up" { @content; }

    @else if $media-query == "lap-and-up" { @content; }

    @else if $media-query == "desk-and-up" { @content; }

    @else if $media-query == "wall-and-up" {}

    @else if $media-query == "below-desk" {}

    @else if $media-query == "below-lap" {}

    @else if $media-query == "below-hand" {}

    // include custom breakpoints
    @else {
      @content;
    }

  // Not legacy-ie
  } @else {
    // render styles without media queries if those breakpoints are false

    @if $media-query == "hand-and-up" {
      @if $hand-start != false {
        @media only screen and (min-width:$hand-start) { @content; }
      }
      @else { @content; }
    }

    @else if $media-query == "lap-and-up" {
      @if $lap-start != false {
        @media only screen and (min-width:$lap-start) { @content; }
      }
      @else { @content; }
    }

    @else if $media-query == "desk-and-up" {
      @if $desk-start != false {
        @media only screen and (min-width:$desk-start) { @content; }
      }
      @else { @content; }
    }

    @else if $media-query == "wall-and-up" {
      @if $wall-start != false {
        @media only screen and (min-width:$wall-start) { @content; }
      }
      @else { @content; }
    }

    @else if $media-query == "below-desk" {
      @if $desk-start != false {
        @media only screen and (max-width: ($desk-start - 1px)) { @content; }
      }
      @else {}
    }

    @else if $media-query == "below-lap" {
      @if $lap-start != false {
        @media only screen and (max-width: ($lap-start - 1px)) { @content; }
      }
      @else {}
    }

    @else if $media-query == "below-hand" {
      @if $hand-start != false {
        @media only screen and (max-width: ($hand-start - 1px)) { @content; }
      }
      @else {}
    }

    // custom breakpoints
    @else {
      @media only screen and ($media-query) { @content; }
    }

  }
}


@-ms-viewport{
  width: device-width;
}

.hidden {
  display: none;
  visibility: hidden;
}

.visible-phone     { display: none !important; }
.visible-tablet    { display: none !important; }
.hidden-phone      { }
.hidden-tablet     { }
.hidden-desktop    { display: none !important; }
.visible-desktop   { display: inherit !important; }

@media (min-width: 768px) and (max-width: 979px) {
  .hidden-desktop    { display: inherit !important; }
  .visible-desktop   { display: none !important ; }
  .visible-tablet    { display: inherit !important; }
  .hidden-tablet     { display: none !important; }
}

@media (max-width: 767px) {
  .hidden-desktop    { display: inherit !important; }
  .visible-desktop   { display: none !important; }
  .visible-phone     { display: inherit !important; }
  .hidden-phone      { display: none !important; }
}

.visible-print    { display: none !important; }
.hidden-print     { }

@media print {
  .visible-print  { display: inherit !important; }
  .hidden-print   { display: none !important; }
}

.clearfix {
  @include clearfix();
}

.hide-text {
  @include hide-text();
}




